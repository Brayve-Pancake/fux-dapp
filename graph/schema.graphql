type User @entity {
  id: ID!
  fuxer: Boolean
  balances: [TokenBalance!] @derivedFrom(field: "user")
  workstreams: [UserWorkstream!] @derivedFrom(field: "user")
  fuxGiven: [FuxGiven!] @derivedFrom(field: "user")
  rewards: BigInt
}

type Workstream @entity {
  id: ID!
  name: String
  coordinator: User
  contributors: [UserWorkstream!] @derivedFrom(field: "workstream")
  funding: BigInt
  deadline: BigInt
  resolved: Boolean
}

type UserWorkstream @entity {
  id: ID!
  user: User!
  workstream: Workstream!
}

type Evaluation @entity {
  id: ID!
  creator: User!
  workstream: Workstream!
  contributors: [User!]!
  ratings: [BigInt!]!
}

type Token @entity {
  id: ID!
  name: String
  symbol: String
  tokenBalances: [TokenBalance!] @derivedFrom(field: "token")
}

type TokenBalance @entity {
  id: ID!
  user: User!
  token: Token!
  balance: BigInt!
}

type FuxGiven @entity {
  id: ID!
  user: User!
  workstream: Workstream!
  balance: BigInt!
}

type VFuxWorkstream @entity {
  id: ID!
  user: User!
  workstream: Workstream!
  balance: BigInt!
}
